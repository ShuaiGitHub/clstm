#!/usr/bin/python

import sys,os,os.path,string,re,glob
from pylab import *
from collections import *


uw="/home/tmb/Databases/uw-English-Japanese-document-image-database-vol-1-bin-images-docs/"
uw2="/home/tmb/Databases/uw-II-English-Japanese-document-image-database/"
uw3="/home/tmb/Databases/uw3-database/"

gtdirs="""/home/tmb/Databases/uw-English-Japanese-document-image-database-vol-1-bin-images-docs/ENGLISH/JOURNAL/LATEX/GROUND
/home/tmb/Databases/uw-English-Japanese-document-image-database-vol-1-bin-images-docs/ENGLISH/JOURNAL/REAL/GROUND
/home/tmb/Databases/uw-English-Japanese-document-image-database-vol-1-bin-images-docs/SOFTWARE/OCREVAL/TEST/TESTDATA/GROUND
/home/tmb/Databases/uw-II-English-Japanese-document-image-database/ENGLISH/JOURNAL/REAL/GROUND
/home/tmb/Databases/uw-II-English-Japanese-document-image-database/ENGLISH/MEMO/REAL/GROUND
/home/tmb/Databases/uw-II-English-Japanese-document-image-database/JAPANESE/JOURNAL/REAL/GROUND
/home/tmb/Databases/uw3-database/ENGLISH/CHAR_TRU/REAL/GROUND
/home/tmb/Databases/uw3-database/ENGLISH/CHAR_TRU/SYNTHET/GROUND
/home/tmb/Databases/uw3-database/ENGLISH/CHEM/GROUND
/home/tmb/Databases/uw3-database/ENGLISH/DRAWING/REAL/GROUND
/home/tmb/Databases/uw3-database/ENGLISH/DRAWING/SYNTHET/GROUND
/home/tmb/Databases/uw3-database/ENGLISH/MATH/GROUND""".split()

def groundtruth(b):
    for d in gtdirs:
        path = d+"/"+b+"GRND.TRU"
        if os.path.exists(path):
            return path
    return None

def loadgt(fname,target_id=None):
    global lines,zones,line
    zones = defaultdict(list)
    with open(fname) as stream:
        lines = [line[:-1] for line in stream.readlines()]
    i = 0
    while i<len(lines):
        assert lines[i]=="GGGGG","wanted GGGGG, got %s"%line
        i += 1
        id = lines[i]
        if target_id is not None: assert id==target_id
        i += 1
        zone = lines[i]
        assert re.match(r'^[0-9A-Z][0-9A-Z][0-9A-Z]$',zone),"line %d: wanted zone, got %s"%(i,zone)
        i += 1
        while i<len(lines) and lines[i]!="GGGGG":
            zones[zone].append(lines[i])
            i += 1
    return zones

def loadboxes(fname,target_id=None):
    global lines,zones,line
    zones = defaultdict(list)
    with open(fname) as stream:
        lines = [line[:-1] for line in stream.readlines()]
    i = 0
    while i<len(lines):
        assert lines[i]=="LLLLL","wanted GGGGG, got %s"%line
        i += 1
        f = lines[i].split()
        assert f[0]=="DOCUMENT_ID"
        id = f[2]
        if target_id is not None: assert id==target_id
        i += 1
        f = lines[i].split()
        assert f[0]=="ZONE_ID"
        zone = f[2]
        assert re.match(r'^[0-9A-Z][0-9A-Z][0-9A-Z]$',zone),"line %d: wanted zone, got %s"%(i,zone)
        i += 1
        while i<len(lines) and lines[i]!="LLLLL":
            f = lines[i].split()
            assert f[0]=="TEXT_LINE_BOX"
            zones[zone].append([int(x) for x in f[2:]])
            i += 1
    return zones

def gtfix(s):
    s = re.sub(r'\\[A-Za-z0-9]+','~',s)
    s = re.sub(r'\\[_^]{(.*?)}','~',s)
    return s
        


os.system("rm -rf book")
os.mkdir("book")

boxfiles=sorted(glob.glob(uw3+"/ENGLISH/LINEWORD/LINEBOXS/*.BOX"))
pageno = 1
skipped = 0
written = 0

for boxfile in boxfiles:
    b = re.search(r'(....)LINE.BOX$',boxfile).group(1)
    boxes = loadboxes(boxfile)
    gtfile = groundtruth(b)
    gt = loadgt(gtfile)
    print boxfile,len(boxes.keys()),len(gt.keys())
    os.mkdir("book/%04d"%pageno)

    iname = uw3+"/ENGLISH/LINEWORD/IMAGEBIN/"+b+"BIN.TIF"
    os.system("convert "+iname+" _temp.png")
    page = imread("_temp.png")
    print page.shape

    lineno = 1
    for zone in sorted(boxes.keys()):
        if len(boxes[zone])!=len(gt[zone]):
            print "ZONE ERROR",len(boxes[zone])!=len(gt[zone])
            continue
        for i in range(len(boxes[zone])):
            bb = boxes[zone][i]
            x0,y0,x1,y1 = bb
            l = gt[zone][i]
            if "\\" in l or "_" in l or "~" in l:
                skipped += 1
                continue
            # l = gtfix(l)
            # assert "\\" not in l
            print written,skipped,bb,l
            image = page[y0:y1,x0:x1]
            # ion(); gray(); clf(); imshow(image); ginput(1,0.001)
            image = image*1.0/amax(image)
            if len(image.shape)==3: image = mean(image,axis=2)
            output = ones((image.shape[0]+6,image.shape[1]+6))
            output[3:-3,3:-3] = image
            image = output
            lbase = "book/%04d/01%04d"%(pageno,lineno)
            imsave(lbase+".png",image)
            imsave(lbase+".bin.png",1*(image>0.5))
            with open(lbase+".gt.txt","w") as stream:
                stream.write(l+"\n")
            lineno += 1
            written += 1
    pageno += 1

print "written",written,"skipped",skipped
